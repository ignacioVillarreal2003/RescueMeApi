spring:
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        default_schema: rescue_me_schema
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    template:
      mandatory: true

  flyway:
    enabled: true
    schemas: rescue_me_schema
    locations: classpath:db/migration

  cache:
    type: redis
  data:
    redis:
      host: ${REDIS_HOST_NAME}
      port: ${REDIS_HOST_PORT}

  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB

jwt:
  secret: ${JWT_SECRET}

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS}

rabbit:
  exchange:
    auth: authApi.exchange
  queue:
    user-register-initial-command: authApi.userRegisterInitialCommand.queue
    user-register-compensation-command: authApi.userRegisterCompensationCommand.queue
    user-register-confirmation-command: authApi.userRegisterConfirmationCommand.queue
    user-register-success-reply: authApi.userRegisterSuccessReply.queue
    user-register-failure-reply: authApi.userRegisterFailureReply.queue
  routing-key:
    user-register-initial-command: authApi.userRegisterInitialCommand.routingKey
    user-register-compensation-command: authApi.userRegisterCompensationCommand.routingKey
    user-register-confirmation-command: authApi.userRegisterConfirmationCommand.routingKey
    user-register-success-reply: authApi.userRegisterSuccessReply.routingKey
    user-register-failure-reply: authApi.userRegisterFailureReply.routingKey